diff --git a/dist/app/components/island-renderer.d.ts b/dist/app/components/island-renderer.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..ac1dc43189a35957bfe9d8acf29266858dbb3200
--- /dev/null
+++ b/dist/app/components/island-renderer.d.ts
@@ -0,0 +1,20 @@
+declare const _default: import("vue").DefineComponent<{
+    context: {
+        type: () => {
+            name: string;
+            props?: Record<string, any>;
+        };
+        required: true;
+    };
+}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
+    [key: string]: any;
+}>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
+    context: {
+        type: () => {
+            name: string;
+            props?: Record<string, any>;
+        };
+        required: true;
+    };
+}>>, {}>;
+export default _default;
diff --git a/dist/app/components/island-renderer.mjs b/dist/app/components/island-renderer.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..1f7537046e9da57efe3d4741b2f30410ec556361
--- /dev/null
+++ b/dist/app/components/island-renderer.mjs
@@ -0,0 +1,26 @@
+import { createBlock, defineComponent, h, Teleport } from "vue";
+import * as islandComponents from "#build/components.islands.mjs";
+import { createError } from "#app";
+export default defineComponent({
+  props: {
+    context: {
+      type: Object,
+      required: true
+    }
+  },
+  async setup(props) {
+    const component = islandComponents[props.context.name];
+    if (!component) {
+      throw createError({
+        statusCode: 404,
+        statusMessage: `Island component not found: ${JSON.stringify(component)}`
+      });
+    }
+    if (typeof component === "object") {
+      await component.__asyncLoader?.();
+    }
+    return () => [
+      createBlock(Teleport, { to: "nuxt-island" }, [h(component || "span", props.context.props)])
+    ];
+  }
+});
diff --git a/dist/app/components/layout.mjs b/dist/app/components/layout.mjs
index 56f2d96b083c2be31b113186451c359a284ca9fc..cb1fe58bfc0cd59d134dba59856d3ade653b487e 100644
--- a/dist/app/components/layout.mjs
+++ b/dist/app/components/layout.mjs
@@ -5,6 +5,7 @@ import { useRoute as useVueRouterRoute } from "#build/pages";
 import layouts from "#build/layouts";
 import { appLayoutTransition as defaultLayoutTransition } from "#build/nuxt.config.mjs";
 const LayoutLoader = defineComponent({
+  inheritAttrs: false,
   props: {
     name: String,
     ...process.dev ? { hasTransition: Boolean } : {}
@@ -23,14 +24,15 @@ const LayoutLoader = defineComponent({
     const LayoutComponent = await layouts[props.name]().then((r) => r.default || r);
     return () => {
       if (process.dev && process.client && props.hasTransition) {
-        vnode = h(LayoutComponent, {}, context.slots);
+        vnode = h(LayoutComponent, context.attrs, context.slots);
         return vnode;
       }
-      return h(LayoutComponent, {}, context.slots);
+      return h(LayoutComponent, context.attrs, context.slots);
     };
   }
 });
 export default defineComponent({
+  inheritAttrs: false,
   props: {
     name: {
       type: [String, Boolean, Object],
@@ -59,7 +61,7 @@ export default defineComponent({
       }
       const transitionProps = route.meta.layoutTransition ?? defaultLayoutTransition;
       return _wrapIf(Transition, hasLayout && transitionProps, {
-        default: () => _wrapIf(LayoutLoader, hasLayout && { key: layout.value, name: layout.value, hasTransition: process.dev ? !!transitionProps : void 0 }, context.slots).default()
+        default: () => _wrapIf(LayoutLoader, hasLayout && { key: layout.value, name: layout.value, hasTransition: process.dev ? !!transitionProps : void 0, ...context.attrs }, context.slots).default()
       }).default();
     };
   }
diff --git a/dist/app/components/nuxt-island.d.ts b/dist/app/components/nuxt-island.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..93d2edeb243c72713067d1d4401fb21ab78deb88
--- /dev/null
+++ b/dist/app/components/nuxt-island.d.ts
@@ -0,0 +1,33 @@
+declare const _default: import("vue").DefineComponent<{
+    name: {
+        type: StringConstructor;
+        required: true;
+    };
+    props: {
+        type: ObjectConstructor;
+        default: () => undefined;
+    };
+    context: {
+        type: ObjectConstructor;
+        default: () => {};
+    };
+}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
+    [key: string]: any;
+}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
+    name: {
+        type: StringConstructor;
+        required: true;
+    };
+    props: {
+        type: ObjectConstructor;
+        default: () => undefined;
+    };
+    context: {
+        type: ObjectConstructor;
+        default: () => {};
+    };
+}>>, {
+    props: Record<string, any>;
+    context: Record<string, any>;
+}>;
+export default _default;
diff --git a/dist/app/components/nuxt-island.mjs b/dist/app/components/nuxt-island.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..fe9e7f6d228e23d2cf339976e63f349f7571ee1a
--- /dev/null
+++ b/dist/app/components/nuxt-island.mjs
@@ -0,0 +1,56 @@
+import { defineComponent, createStaticVNode, computed, ref, watch } from "vue";
+import { debounce } from "perfect-debounce";
+import { hash } from "ohash";
+import { useHead, useNuxtApp } from "#app";
+const pKey = "_islandPromises";
+export default defineComponent({
+  name: "NuxtIsland",
+  props: {
+    name: {
+      type: String,
+      required: true
+    },
+    props: {
+      type: Object,
+      default: () => void 0
+    },
+    context: {
+      type: Object,
+      default: () => ({})
+    }
+  },
+  async setup(props) {
+    const nuxtApp = useNuxtApp();
+    const hashId = computed(() => hash([props.name, props.props, props.context]));
+    const html = ref("");
+    const cHead = ref({ link: [], style: [] });
+    useHead(cHead);
+    function _fetchComponent() {
+      return $fetch(`/__nuxt_island/${props.name}:${hashId.value}`, {
+        params: {
+          ...props.context,
+          props: props.props ? JSON.stringify(props.props) : void 0
+        }
+      });
+    }
+    async function fetchComponent() {
+      nuxtApp[pKey] = nuxtApp[pKey] || {};
+      if (!nuxtApp[pKey][hashId.value]) {
+        nuxtApp[pKey][hashId.value] = _fetchComponent().finally(() => {
+          delete nuxtApp[pKey][hashId.value];
+        });
+      }
+      const res = await nuxtApp[pKey][hashId.value];
+      cHead.value.link = res.head.link;
+      cHead.value.style = res.head.style;
+      html.value = res.html;
+    }
+    if (process.server || !nuxtApp.isHydrating) {
+      await fetchComponent();
+    }
+    if (process.client) {
+      watch(props, debounce(fetchComponent, 100));
+    }
+    return () => createStaticVNode(html.value, 1);
+  }
+});
diff --git a/dist/app/components/nuxt-link.mjs b/dist/app/components/nuxt-link.mjs
index 6116282d2527e607b1fe2cce24ebeb9c0a1a67df..79004ec6e447443c2e8ac67a6ade5dee1f1f15f0 100644
--- a/dist/app/components/nuxt-link.mjs
+++ b/dist/app/components/nuxt-link.mjs
@@ -124,25 +124,32 @@ export function defineNuxtLink(options) {
         const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && typeof to.value === "string" && props.target !== "_blank" && !isSlowConnection();
         if (shouldPrefetch) {
           const nuxtApp = useNuxtApp();
-          const observer = useObserver();
           let idleId;
           let unobserve = null;
           onMounted(() => {
-            idleId = requestIdleCallback(() => {
-              if (el?.value?.tagName) {
-                unobserve = observer.observe(el.value, async () => {
-                  unobserve?.();
-                  unobserve = null;
-                  await Promise.all([
-                    nuxtApp.hooks.callHook("link:prefetch", to.value).catch(() => {
-                    }),
-                    !isExternal.value && preloadRouteComponents(to.value, router).catch(() => {
-                    })
-                  ]);
-                  prefetched.value = true;
-                });
-              }
-            });
+            const observer = useObserver();
+            function registerCallback() {
+              idleId = requestIdleCallback(() => {
+                if (el?.value?.tagName) {
+                  unobserve = observer.observe(el.value, async () => {
+                    unobserve?.();
+                    unobserve = null;
+                    await Promise.all([
+                      nuxtApp.hooks.callHook("link:prefetch", to.value).catch(() => {
+                      }),
+                      !isExternal.value && preloadRouteComponents(to.value, router).catch(() => {
+                      })
+                    ]);
+                    prefetched.value = true;
+                  });
+                }
+              });
+            }
+            if (nuxtApp.isHydrating) {
+              nuxtApp.hook("app:suspense:resolve", () => setTimeout(registerCallback, 50));
+            } else {
+              registerCallback();
+            }
           });
           onBeforeUnmount(() => {
             if (idleId) {
diff --git a/dist/app/components/nuxt-loading-indicator.d.ts b/dist/app/components/nuxt-loading-indicator.d.ts
index c399b3e9b003b9a050adc996d26c756dd5a0fc61..6ad6004ba68f29559861d5b16594157429ed217d 100644
--- a/dist/app/components/nuxt-loading-indicator.d.ts
+++ b/dist/app/components/nuxt-loading-indicator.d.ts
@@ -35,9 +35,9 @@ declare const _default: import("vue").DefineComponent<{
         default: string;
     };
 }>>, {
+    color: string;
     throttle: number;
     duration: number;
     height: number;
-    color: string;
 }>;
 export default _default;
diff --git a/dist/app/components/nuxt-root.vue b/dist/app/components/nuxt-root.vue
index e703fef657dda7746cb9bce88a300897c2513ceb..3cc51674727d9d9e162d342681f30706d54931e3 100644
--- a/dist/app/components/nuxt-root.vue
+++ b/dist/app/components/nuxt-root.vue
@@ -1,6 +1,7 @@
 <template>
   <Suspense @resolve="onResolve">
     <ErrorComponent v-if="error" :error="error" />
+    <IslandRendererer v-else-if="islandContext" :context="islandContext" />
     <AppComponent v-else />
   </Suspense>
 </template>
@@ -11,6 +12,9 @@ import { callWithNuxt, isNuxtError, showError, useError, useRoute, useNuxtApp }
 import AppComponent from '#build/app-component.mjs'
 
 const ErrorComponent = defineAsyncComponent(() => import('#build/error-component.mjs').then(r => r.default || r))
+const IslandRendererer = process.server
+  ? defineAsyncComponent(() => import('./island-renderer').then(r => r.default || r))
+  : () => null
 
 const nuxtApp = useNuxtApp()
 const onResolve = nuxtApp.deferHydration()
@@ -32,4 +36,7 @@ onErrorCaptured((err, target, info) => {
     callWithNuxt(nuxtApp, showError, [err])
   }
 })
+
+// Component islands context
+const { islandContext } = process.server && nuxtApp.ssrContext
 </script>
diff --git a/dist/app/composables/cookie.d.ts b/dist/app/composables/cookie.d.ts
index 3c38819245c75dfa4098afec814c7d1af8c4e25b..e840ae3d52c2ed1b3ddec8559688e0dc193b5fad 100644
--- a/dist/app/composables/cookie.d.ts
+++ b/dist/app/composables/cookie.d.ts
@@ -6,7 +6,7 @@ export interface CookieOptions<T = any> extends _CookieOptions {
     encode?(value: T): string;
     default?: () => T | Ref<T>;
 }
-export interface CookieRef<T> extends Ref<T | null> {
+export interface CookieRef<T> extends Ref<T> {
 }
-export declare function useCookie<T = string>(name: string, _opts?: CookieOptions<T>): CookieRef<T>;
+export declare function useCookie<T = string | null>(name: string, _opts?: CookieOptions<T>): CookieRef<T>;
 export {};
diff --git a/dist/app/nuxt.d.ts b/dist/app/nuxt.d.ts
index ffcb120902aa2d00790d5e55a74e84f43f360f7c..fe3e29c8d2d5ecaf532e9d4b07e8481b6160f9e6 100644
--- a/dist/app/nuxt.d.ts
+++ b/dist/app/nuxt.d.ts
@@ -4,6 +4,7 @@ import { Hookable } from 'hookable';
 import type { RuntimeConfig, AppConfigInput } from '@nuxt/schema';
 import type { SSRContext } from 'vue-bundle-renderer/runtime';
 import type { H3Event } from 'h3';
+import type { NuxtIslandContext } from '../core/runtime/nitro/renderer';
 type NuxtMeta = {
     htmlAttrs?: string;
     headAttrs?: string;
@@ -46,6 +47,7 @@ export interface NuxtSSRContext extends SSRContext {
     payload: _NuxtApp['payload'];
     teleports?: Record<string, string>;
     renderMeta?: () => Promise<NuxtMeta> | NuxtMeta;
+    islandContext?: NuxtIslandContext;
 }
 interface _NuxtApp {
     vueApp: App<Element>;
diff --git a/dist/app/nuxt.mjs b/dist/app/nuxt.mjs
index ea2b295bff856edbe219cf54fb5dfef552b35330..3d4f88454e4804fd0decfa2e648f7653db3fca38 100644
--- a/dist/app/nuxt.mjs
+++ b/dist/app/nuxt.mjs
@@ -33,6 +33,7 @@ export function createNuxtApp(options) {
         hydratingCount--;
         if (hydratingCount === 0) {
           nuxtApp.isHydrating = false;
+          globalThis.__hydrated = true;
           return nuxtApp.callHook("app:suspense:resolve");
         }
       };
diff --git a/dist/core/runtime/nitro/renderer.d.ts b/dist/core/runtime/nitro/renderer.d.ts
index 574a48ab1f48c85e0aa6ed971759387589231e1c..a99d542cf9f153fa63c0373eff32d845fc6efe12 100644
--- a/dist/core/runtime/nitro/renderer.d.ts
+++ b/dist/core/runtime/nitro/renderer.d.ts
@@ -1,4 +1,5 @@
 export interface NuxtRenderHTMLContext {
+    island?: boolean;
     htmlAttrs: string[];
     head: string[];
     bodyAttrs: string[];
@@ -6,6 +7,24 @@ export interface NuxtRenderHTMLContext {
     body: string[];
     bodyAppend: string[];
 }
+export interface NuxtIslandContext {
+    id?: string;
+    name: string;
+    props?: Record<string, any>;
+    url?: string;
+}
+export interface NuxtIslandResponse {
+    id?: string;
+    html: string;
+    state: Record<string, any>;
+    head: {
+        link: (Record<string, string>)[];
+        style: ({
+            innerHTML: string;
+            key: string;
+        })[];
+    };
+}
 export interface NuxtRenderResponse {
     body: string;
     statusCode: number;
diff --git a/dist/core/runtime/nitro/renderer.mjs b/dist/core/runtime/nitro/renderer.mjs
index 52137f73f0a885ef156b156ab264f6350f09c9ca..1250b40c2b31f41e24b530cbf64a298ecc547721 100644
--- a/dist/core/runtime/nitro/renderer.mjs
+++ b/dist/core/runtime/nitro/renderer.mjs
@@ -1,9 +1,11 @@
 import { createRenderer, renderResourceHeaders } from "vue-bundle-renderer/runtime";
-import { appendHeader, createError, getQuery, writeEarlyHints } from "h3";
+import { appendHeader, getQuery, writeEarlyHints, readBody, createError } from "h3";
 import devalue from "@nuxt/devalue";
+import destr from "destr";
 import { joinURL } from "ufo";
 import { renderToString as _renderToString } from "vue/server-renderer";
 import { useRuntimeConfig, useNitroApp, defineRenderHandler, getRouteRules } from "#internal/nitro";
+import { hash } from "ohash";
 import { appRootId, appRootTag } from "#internal/nuxt.config.mjs";
 import { buildAssetsURL, publicAssetsURL } from "#paths";
 globalThis.__buildAssetsURL = buildAssetsURL;
@@ -65,15 +67,30 @@ const getSPARenderer = lazyCachedFunction(async () => {
     renderToString
   };
 });
+async function getIslandContext(event) {
+  const url = event.req.url?.substring("/__nuxt_island".length + 1) || "";
+  const [componentName, hashId] = url.split("?")[0].split(":");
+  const context = event.req.method === "GET" ? getQuery(event) : await readBody(event);
+  const ctx = {
+    url: "/",
+    ...context,
+    id: hashId,
+    name: componentName,
+    props: destr(context.props) || {}
+  };
+  return ctx;
+}
 const PAYLOAD_CACHE = process.env.NUXT_PAYLOAD_EXTRACTION && process.env.prerender ? /* @__PURE__ */ new Map() : null;
 const PAYLOAD_URL_RE = /\/_payload(\.[a-zA-Z0-9]+)?.js(\?.*)?$/;
 const PRERENDER_NO_SSR_ROUTES = /* @__PURE__ */ new Set(["/index.html", "/200.html", "/404.html"]);
 export default defineRenderHandler(async (event) => {
+  const nitroApp = useNitroApp();
   const ssrError = event.node.req.url?.startsWith("/__nuxt_error") ? getQuery(event) : null;
   if (ssrError && event.node.req.socket.readyState !== "readOnly") {
     throw createError("Cannot directly render error page!");
   }
-  let url = ssrError?.url || event.node.req.url;
+  const islandContext = process.env.NUXT_COMPONENT_ISLANDS && event.req.url?.startsWith("/__nuxt_island") ? await getIslandContext(event) : void 0;
+  let url = ssrError?.url || islandContext?.url || event.node.req.url;
   const isRenderingPayload = PAYLOAD_URL_RE.test(url);
   if (isRenderingPayload) {
     url = url.substring(0, url.lastIndexOf("/")) || "/";
@@ -90,7 +107,8 @@ export default defineRenderHandler(async (event) => {
     noSSR: !!process.env.NUXT_NO_SSR || !!event.node.req.headers["x-nuxt-no-ssr"] || routeOptions.ssr === false || (process.env.prerender ? PRERENDER_NO_SSR_ROUTES.has(url) : false),
     error: !!ssrError,
     nuxt: void 0,
-    payload: ssrError ? { error: ssrError } : {}
+    payload: ssrError ? { error: ssrError } : {},
+    islandContext
   };
   const _PAYLOAD_EXTRACTION = process.env.prerender && process.env.NUXT_PAYLOAD_EXTRACTION && !ssrContext.noSSR;
   const payloadURL = _PAYLOAD_EXTRACTION ? joinURL(useRuntimeConfig().app.baseURL, url, "_payload.js") : void 0;
@@ -123,6 +141,7 @@ export default defineRenderHandler(async (event) => {
   const renderedMeta = await ssrContext.renderMeta?.() ?? {};
   const inlinedStyles = process.env.NUXT_INLINE_STYLES ? await renderInlineStyles(ssrContext.modules ?? ssrContext._registeredComponents ?? []) : "";
   const htmlContext = {
+    island: Boolean(islandContext),
     htmlAttrs: normalizeChunks([renderedMeta.htmlAttrs]),
     head: normalizeChunks([
       renderedMeta.headTags,
@@ -137,24 +156,51 @@ export default defineRenderHandler(async (event) => {
       renderedMeta.bodyScriptsPrepend,
       ssrContext.teleports?.body
     ]),
-    body: [
-      _rendered.html
-    ],
+    body: process.env.NUXT_COMPONENT_ISLANDS && islandContext ? [] : [_rendered.html],
     bodyAppend: normalizeChunks([
       process.env.NUXT_NO_SCRIPTS ? void 0 : _PAYLOAD_EXTRACTION ? `<script type="module">import p from "${payloadURL}";window.__NUXT__={...p,...(${devalue(splitPayload(ssrContext).initial)})}<\/script>` : `<script>window.__NUXT__=${devalue(ssrContext.payload)}<\/script>`,
       _rendered.renderScripts(),
       renderedMeta.bodyScripts
     ])
   };
-  const nitroApp = useNitroApp();
   await nitroApp.hooks.callHook("render:html", htmlContext, { event });
+  if (process.env.NUXT_COMPONENT_ISLANDS && islandContext) {
+    const _tags = htmlContext.head.flatMap((head2) => extractHTMLTags(head2));
+    const head = {
+      link: _tags.filter((tag) => tag.tagName === "link" && tag.attrs.rel === "stylesheet" && tag.attrs.href.includes("scoped") && !tag.attrs.href.includes("pages/")).map((tag) => ({
+        key: "island-link-" + hash(tag.attrs.href),
+        ...tag.attrs
+      })),
+      style: _tags.filter((tag) => tag.tagName === "style" && tag.innerHTML).map((tag) => ({
+        key: "island-style-" + hash(tag.innerHTML),
+        innerHTML: tag.innerHTML
+      }))
+    };
+    const islandResponse = {
+      id: islandContext.id,
+      head,
+      html: ssrContext.teleports["nuxt-island"].replace(/<!--.*-->/g, ""),
+      state: ssrContext.payload.state
+    };
+    await nitroApp.hooks.callHook("render:island", islandResponse, { event, islandContext });
+    const response2 = {
+      body: JSON.stringify(islandResponse, null, 2),
+      statusCode: event.res.statusCode,
+      statusMessage: event.res.statusMessage,
+      headers: {
+        "content-type": "application/json;charset=utf-8",
+        "x-powered-by": "Nuxt"
+      }
+    };
+    return response2;
+  }
   const response = {
     body: renderHTMLDocument(htmlContext),
     statusCode: event.node.res.statusCode,
     statusMessage: event.node.res.statusMessage,
     headers: {
-      "Content-Type": "text/html;charset=UTF-8",
-      "X-Powered-By": "Nuxt"
+      "content-type": "text/html;charset=utf-8",
+      "x-powered-by": "Nuxt"
     }
   };
   return response;
@@ -187,6 +233,20 @@ function renderHTMLDocument(html) {
 <body ${joinAttrs(html.bodyAttrs)}>${joinTags(html.bodyPrepend)}${joinTags(html.body)}${joinTags(html.bodyAppend)}</body>
 </html>`;
 }
+const HTML_TAG_RE = /<(?<tag>[a-z]+)(?<rawAttrs> [^>]*)?>(?:(?<innerHTML>[\s\S]*?)<\/\k<tag>)?/g;
+const HTML_TAG_ATTR_RE = /(?<name>[a-z]+)="(?<value>[^"]*)"/g;
+function extractHTMLTags(html) {
+  const tags = [];
+  for (const tagMatch of html.matchAll(HTML_TAG_RE)) {
+    const attrs = {};
+    for (const attrMatch of tagMatch.groups.rawAttrs?.matchAll(HTML_TAG_ATTR_RE) || []) {
+      attrs[attrMatch.groups.name] = attrMatch.groups.value;
+    }
+    const innerHTML = tagMatch.groups.innerHTML || "";
+    tags.push({ tagName: tagMatch.groups.tag, attrs, innerHTML });
+  }
+  return tags;
+}
 async function renderInlineStyles(usedModules) {
   const styleMap = await getSSRStyles();
   const inlinedStyles = /* @__PURE__ */ new Set();
diff --git a/dist/head/runtime/components.d.ts b/dist/head/runtime/components.d.ts
index 5bdc1c5a184a780f73e909c9ceed54a69266403a..d41e50871509294c4defa67ba58737c8f9c04b17 100644
--- a/dist/head/runtime/components.d.ts
+++ b/dist/head/runtime/components.d.ts
@@ -241,8 +241,8 @@ export declare const Link: import("vue").DefineComponent<{
     tabindex: StringConstructor;
     translate: StringConstructor;
 }>>, {
-    prefetch: boolean;
     body: boolean;
+    prefetch: boolean;
     autofocus: boolean;
     contenteditable: boolean;
     draggable: boolean;
diff --git a/dist/index.mjs b/dist/index.mjs
index 21cbca660fda785449c63f7bc12cffea5f92904f..59f65a71b571c545df0333d62d6a565904453b49 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -647,7 +647,7 @@ const componentsTemplate = {
     const imports = /* @__PURE__ */ new Set();
     imports.add("import { defineAsyncComponent } from 'vue'");
     let num = 0;
-    const components = options.getComponents(options.mode).flatMap((c) => {
+    const components = options.getComponents(options.mode).filter((c) => !c.island).flatMap((c) => {
       const exp = c.export === "default" ? "c.default || c" : `c['${c.export}']`;
       const comment = createImportMagicComments(c);
       const isClient = c.mode === "client";
@@ -667,15 +667,26 @@ const componentsTemplate = {
     return [
       ...imports,
       ...components,
-      `export const componentNames = ${JSON.stringify(options.getComponents().map((c) => c.pascalName))}`
+      `export const componentNames = ${JSON.stringify(options.getComponents().filter((c) => !c.island).map((c) => c.pascalName))}`
     ].join("\n");
   }
 };
+const componentsIslandsTemplate = {
+  getContents({ options }) {
+    return options.getComponents().filter((c) => c.island).map(
+      (c) => {
+        const exp = c.export === "default" ? "c.default || c" : `c['${c.export}']`;
+        const comment = createImportMagicComments(c);
+        return `export const ${c.pascalName} = defineAsyncComponent(${genDynamicImport(c.filePath, { comment })}.then(c => ${exp}))`;
+      }
+    ).join("\n");
+  }
+};
 const componentsTypeTemplate = {
   filename: "components.d.ts",
   getContents: ({ options, nuxt }) => {
     const buildDir = nuxt.options.buildDir;
-    const componentTypes = options.getComponents().map((c) => [
+    const componentTypes = options.getComponents().filter((c) => !c.island).map((c) => [
       c.pascalName,
       `typeof ${genDynamicImport(isAbsolute(c.filePath) ? relative(buildDir, c.filePath).replace(/(?<=\w)\.(?!vue)\w+$/g, "") : c.filePath.replace(/(?<=\w)\.(?!vue)\w+$/g, ""), { wrapper: false })}['${c.export}']`
     ]);
@@ -716,9 +727,10 @@ async function scanComponents(dirs, srcDir) {
         dir.pathPrefix !== false ? splitByCase(relative(dir.path, dirname(filePath))) : []
       );
       let fileName = basename(filePath, extname(filePath));
-      const global = /\.(global)$/.test(fileName) || dir.global;
-      const mode = fileName.match(/(?<=\.)(client|server)(\.global)?$/)?.[1] || "all";
-      fileName = fileName.replace(/(\.(client|server))?(\.global)?$/, "");
+      const island = /\.(island)(\.global)?$/.test(fileName) || dir.island;
+      const global = /\.(global)(\.island)?$/.test(fileName) || dir.global;
+      const mode = island ? "server" : fileName.match(/(?<=\.)(client|server)(\.global|\.island)*$/)?.[1] || "all";
+      fileName = fileName.replace(/(\.(client|server))?(\.global|\.island)*$/, "");
       if (fileName.toLowerCase() === "index") {
         fileName = dir.pathPrefix === false ? basename(dirname(filePath)) : "";
       }
@@ -746,6 +758,7 @@ async function scanComponents(dirs, srcDir) {
       let component = {
         mode,
         global,
+        island,
         prefetch: Boolean(dir.prefetch),
         preload: Boolean(dir.preload),
         filePath,
@@ -912,7 +925,7 @@ const isDirectory = (p) => {
 function compareDirByPathLength({ path: pathA }, { path: pathB }) {
   return pathB.split(/[\\/]/).filter(Boolean).length - pathA.split(/[\\/]/).filter(Boolean).length;
 }
-const DEFAULT_COMPONENTS_DIRS_RE = /\/components$|\/components\/global$/;
+const DEFAULT_COMPONENTS_DIRS_RE = /\/components(\/global|\/islands)?$/;
 const componentsModule = defineNuxtModule({
   meta: {
     name: "components",
@@ -935,6 +948,7 @@ const componentsModule = defineNuxtModule({
       }
       if (dir === true || dir === void 0) {
         return [
+          { path: resolve(cwd, "components/islands"), island: true },
           { path: resolve(cwd, "components/global"), global: true },
           { path: resolve(cwd, "components") }
         ];
@@ -990,6 +1004,11 @@ const componentsModule = defineNuxtModule({
     addPluginTemplate({ ...componentsPluginTemplate, options: { getComponents } });
     addTemplate({ ...componentsTemplate, filename: "components.server.mjs", options: { getComponents, mode: "server" } });
     addTemplate({ ...componentsTemplate, filename: "components.client.mjs", options: { getComponents, mode: "client" } });
+    if (nuxt.options.experimental.componentIslands) {
+      addTemplate({ ...componentsIslandsTemplate, filename: "components.islands.mjs", options: { getComponents } });
+    } else {
+      addTemplate({ filename: "components.islands.mjs", getContents: () => "export default {}" });
+    }
     nuxt.hook("vite:extendConfig", (config, { isClient }) => {
       const mode = isClient ? "client" : "server";
       config.resolve.alias["#components"] = resolve(nuxt.options.buildDir, `components.${mode}.mjs`);
@@ -1428,7 +1447,7 @@ const UnctxTransformPlugin = (nuxt) => {
     app = _app;
   });
   return createUnplugin((options = {}) => ({
-    name: "unctx:transfrom",
+    name: "unctx:transform",
     enforce: "post",
     transformInclude(id) {
       id = normalize(id).replace(/\?.*$/, "");
@@ -1449,7 +1468,7 @@ const UnctxTransformPlugin = (nuxt) => {
 const TreeShakePlugin = createUnplugin((options) => {
   const COMPOSABLE_RE = new RegExp(`($\\s+)(${options.treeShake.join("|")})(?=\\()`, "gm");
   return {
-    name: "nuxt:server-treeshake:transfrom",
+    name: "nuxt:server-treeshake:transform",
     enforce: "post",
     transformInclude(id) {
       const { pathname, search } = parseURL(decodeURIComponent(pathToFileURL(id).href));
@@ -1483,7 +1502,7 @@ const TreeShakePlugin = createUnplugin((options) => {
 const DevOnlyPlugin = createUnplugin((options) => {
   const DEVONLY_COMP_RE = /<dev-?only>(:?[\s\S]*)<\/dev-?only>/gmi;
   return {
-    name: "nuxt:server-devonly:transfrom",
+    name: "nuxt:server-devonly:transform",
     enforce: "pre",
     transformInclude(id) {
       const { pathname, search } = parseURL(decodeURIComponent(pathToFileURL(id).href));
@@ -1615,6 +1634,7 @@ async function initNitro(nuxt) {
       "process.env.NUXT_NO_SCRIPTS": !!nuxt.options.experimental.noScripts && !nuxt.options.dev,
       "process.env.NUXT_INLINE_STYLES": !!nuxt.options.experimental.inlineSSRStyles,
       "process.env.NUXT_PAYLOAD_EXTRACTION": !!nuxt.options.experimental.payloadExtraction,
+      "process.env.NUXT_COMPONENT_ISLANDS": !!nuxt.options.experimental.componentIslands,
       "process.dev": nuxt.options.dev,
       __VUE_PROD_DEVTOOLS__: false
     },
@@ -1806,6 +1826,12 @@ async function initNuxt(nuxt) {
     name: "NuxtLoadingIndicator",
     filePath: resolve(nuxt.options.appDir, "components/nuxt-loading-indicator")
   });
+  if (nuxt.options.experimental.componentIslands) {
+    addComponent({
+      name: "NuxtIsland",
+      filePath: resolve(nuxt.options.appDir, "components/nuxt-island")
+    });
+  }
   if (!nuxt.options.dev && nuxt.options.experimental.payloadExtraction) {
     addPlugin(resolve(nuxt.options.appDir, "plugins/payload.client"));
   }
diff --git a/dist/pages/runtime/page.d.ts b/dist/pages/runtime/page.d.ts
index 73d78ca413b4f468d6404e443ab5dd0ec589fee8..aab9913792eddb9e08851155ddc47bd300ea30e2 100644
--- a/dist/pages/runtime/page.d.ts
+++ b/dist/pages/runtime/page.d.ts
@@ -1,13 +1,18 @@
+import { KeepAliveProps, TransitionProps } from 'vue';
 import type { DefineComponent } from 'vue';
 import type { RouteLocationNormalized, RouteLocationNormalizedLoaded } from 'vue-router';
 declare const _default: DefineComponent<{
     [key: string]: any;
     name?: string | undefined;
+    transition?: boolean | TransitionProps | undefined;
+    keepalive?: boolean | KeepAliveProps | undefined;
     route?: RouteLocationNormalized | undefined;
     pageKey?: string | ((route: RouteLocationNormalizedLoaded) => string) | undefined;
 }, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
     [key: string]: any;
     name?: string | undefined;
+    transition?: boolean | TransitionProps | undefined;
+    keepalive?: boolean | KeepAliveProps | undefined;
     route?: RouteLocationNormalized | undefined;
     pageKey?: string | ((route: RouteLocationNormalizedLoaded) => string) | undefined;
 }>>, {
diff --git a/dist/pages/runtime/page.mjs b/dist/pages/runtime/page.mjs
index 84ab03eda939d8da95ddb91599b2026959978eea..c24ea5adac26faa846377e34745e0e16e4b86577 100644
--- a/dist/pages/runtime/page.mjs
+++ b/dist/pages/runtime/page.mjs
@@ -36,7 +36,7 @@ export default defineComponent({
           if (!routeProps.Component) {
             return;
           }
-          const key = generateRouteKey(props.pageKey, routeProps);
+          const key = generateRouteKey(routeProps, props.pageKey);
           const done = nuxtApp.deferHydration();
           const hasTransition = !!(props.transition ?? routeProps.route.meta.pageTransition ?? defaultPageTransition);
           const transitionProps = hasTransition && _mergeTransitionProps([
diff --git a/dist/pages/runtime/utils.d.ts b/dist/pages/runtime/utils.d.ts
index df201f3e10ff2ea4a291b7bf95874649b79da2c1..7f84a96738dabb94685c735f7e85f69204717ae5 100644
--- a/dist/pages/runtime/utils.d.ts
+++ b/dist/pages/runtime/utils.d.ts
@@ -2,7 +2,7 @@ import type { RouterView, RouteLocationNormalizedLoaded } from 'vue-router';
 type InstanceOf<T> = T extends new (...args: any[]) => infer R ? R : never;
 type RouterViewSlot = Exclude<InstanceOf<typeof RouterView>['$slots']['default'], undefined>;
 export type RouterViewSlotProps = Parameters<RouterViewSlot>[0];
-export declare const generateRouteKey: (override: string | ((route: RouteLocationNormalizedLoaded) => string), routeProps: RouterViewSlotProps) => string;
+export declare const generateRouteKey: (routeProps: RouterViewSlotProps, override?: string | ((route: RouteLocationNormalizedLoaded) => string) | undefined) => string | false | undefined;
 export declare const wrapInKeepAlive: (props: any, children: any) => {
     default: () => any;
 };
diff --git a/dist/pages/runtime/utils.mjs b/dist/pages/runtime/utils.mjs
index 257077ab02a26d95b16fb35506c1f306c8537ac2..903b167361a0636fd16077c00cc3ed024e05502a 100644
--- a/dist/pages/runtime/utils.mjs
+++ b/dist/pages/runtime/utils.mjs
@@ -2,7 +2,7 @@ import { KeepAlive, h } from "vue";
 const interpolatePath = (route, match) => {
   return match.path.replace(/(:\w+)\([^)]+\)/g, "$1").replace(/(:\w+)[?+*]/g, "$1").replace(/:\w+/g, (r) => route.params[r.slice(1)]?.toString() || "");
 };
-export const generateRouteKey = (override, routeProps) => {
+export const generateRouteKey = (routeProps, override) => {
   const matchedRoute = routeProps.route.matched.find((m) => m.components?.default === routeProps.Component.type);
   const source = override ?? matchedRoute?.meta.key ?? (matchedRoute && interpolatePath(routeProps.route, matchedRoute));
   return typeof source === "function" ? source(routeProps.route) : source;